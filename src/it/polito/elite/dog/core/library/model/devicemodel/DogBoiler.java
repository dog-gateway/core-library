/*
 * Dog - Core
 *
 * Copyright (c) 2011-2020 Dario Bonino and Luigi De Russis
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
//
// Automatically generated by the DogOnt2Dog utility
//

package it.polito.elite.dog.core.library.model.devicemodel;


 
/**
* DogBoilerModel - automatically generated by DogOnt2Dog
*/

import it.polito.elite.dog.core.library.model.devicecategory.Boiler;
import it.polito.elite.dog.core.library.model.AbstractDevice;
import it.polito.elite.dog.core.library.model.DeviceStatus;
import it.polito.elite.dog.core.library.model.DeviceDescriptor;
import org.osgi.framework.BundleContext;
import org.osgi.service.device.Device;
import javax.measure.Measure;

import it.polito.elite.dog.core.library.model.notification.*;
public class DogBoiler extends AbstractDevice implements Boiler
{

	public DogBoiler(BundleContext context, DeviceDescriptor deviceDescriptor)
	{
		super(context);


		this.setDeviceProperties(deviceDescriptor);


		this.registerDevice(Device.class.getName());
	}


	public void startSuperHeating()
	{
		if(this.driver!=null)
		{
			((Boiler) this.driver).startSuperHeating();
		}
	}

	public void stopSuperHeating()
	{
		if(this.driver!=null)
		{
			((Boiler) this.driver).stopSuperHeating();
		}
	}

	public Measure<?,?>  getStartTime()
	{
		if(this.driver!=null)
		{
			return ((Boiler) this.driver).getStartTime();
		}
		 return null;
	}

	public DeviceStatus getState()
	{
		if(this.driver!=null)
		{
			return ((Boiler) this.driver).getState();
		}
		 return null;
	}

	public void standBy()
	{
		if(this.driver!=null)
		{
			((Boiler) this.driver).standBy();
		}
	}

	public void on()
	{
		if(this.driver!=null)
		{
			((Boiler) this.driver).on();
		}
	}

	public Measure<?,?>  getRemainingTime()
	{
		if(this.driver!=null)
		{
			return ((Boiler) this.driver).getRemainingTime();
		}
		 return null;
	}

	public Measure<?,?>  getEndTime()
	{
		if(this.driver!=null)
		{
			return ((Boiler) this.driver).getEndTime();
		}
		 return null;
	}

	public void setStartTime(Measure<?,?>  endTime, Measure<?,?>  remainingTime, Measure<?,?>  startTime)
	{
		if(this.driver!=null)
		{
			((Boiler) this.driver).setStartTime(endTime, remainingTime, startTime);
		}
	}

	public Object[] getEventsAndAlerts()
	{
		if(this.driver!=null)
		{
			return ((Boiler) this.driver).getEventsAndAlerts();
		}
		 return null;
	}

	public void off()
	{
		if(this.driver!=null)
		{
			((Boiler) this.driver).off();
		}
	}



	/*Generated Notifications*/

	/*Notification: MultipleEventNotification*/
	public void notifyNewEvent(Object event, Object sensorId, String notificationId)
	{
		MultipleEventNotification notificationEvent=new MultipleEventNotification(event , sensorId );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(Boiler.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyNewEvent(Object event, Object sensorId)
{
		// call the more general method with a null notification id.
		this.notifyNewEvent(event , sensorId , null);
	}
	/*Notification: StandByNotification*/
	public void notifyStandby(String notificationId)
	{
		StandByNotification notificationEvent=new StandByNotification();
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(Boiler.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyStandby()
{
		// call the more general method with a null notification id.
		this.notifyStandby(null);
	}
	/*Notification: EventNotification*/
	public void notifyNewEvent(Object event, String notificationId)
	{
		EventNotification notificationEvent=new EventNotification(event );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(Boiler.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyNewEvent(Object event)
{
		// call the more general method with a null notification id.
		this.notifyNewEvent(event , null);
	}
	/*Notification: AlertNotification*/
	public void notifyNewAlert(Object alert, String notificationId)
	{
		AlertNotification notificationEvent=new AlertNotification(alert );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(Boiler.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyNewAlert(Object alert)
{
		// call the more general method with a null notification id.
		this.notifyNewAlert(alert , null);
	}
	/*Notification: OffNotification*/
	public void notifyOff(String notificationId)
	{
		OffNotification notificationEvent=new OffNotification();
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(Boiler.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyOff()
{
		// call the more general method with a null notification id.
		this.notifyOff(null);
	}
	/*Notification: RemainingTimeChangedNotification*/
	public void notifyChangedRemainingTime(Measure<?,?>  remainingTime, String notificationId)
	{
		RemainingTimeChangedNotification notificationEvent=new RemainingTimeChangedNotification(remainingTime );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(Boiler.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyChangedRemainingTime(Measure<?,?>  remainingTime)
{
		// call the more general method with a null notification id.
		this.notifyChangedRemainingTime(remainingTime , null);
	}
	/*Notification: MultipleAlertNotification*/
	public void notifyNewAlert(Object alertId, Object alert, String notificationId)
	{
		MultipleAlertNotification notificationEvent=new MultipleAlertNotification(alertId , alert );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(Boiler.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyNewAlert(Object alertId, Object alert)
{
		// call the more general method with a null notification id.
		this.notifyNewAlert(alertId , alert , null);
	}
	/*Notification: OnNotification*/
	public void notifyOn(String notificationId)
	{
		OnNotification notificationEvent=new OnNotification();
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(Boiler.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyOn()
{
		// call the more general method with a null notification id.
		this.notifyOn(null);
	}
	/*Notification: StartedSuperHeatingNotification*/
	public void notifyStartedSuperHeating(String notificationId)
	{
		StartedSuperHeatingNotification notificationEvent=new StartedSuperHeatingNotification();
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(Boiler.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyStartedSuperHeating()
{
		// call the more general method with a null notification id.
		this.notifyStartedSuperHeating(null);
	}
	/*Notification: EndTimeChangedNotification*/
	public void notifyChangedEndTime(Measure<?,?>  endTime, String notificationId)
	{
		EndTimeChangedNotification notificationEvent=new EndTimeChangedNotification(endTime );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(Boiler.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyChangedEndTime(Measure<?,?>  endTime)
{
		// call the more general method with a null notification id.
		this.notifyChangedEndTime(endTime , null);
	}
	/*Notification: StartTimeChangedNotification*/
	public void notifyChangedStartTime(Measure<?,?>  startTime, String notificationId)
	{
		StartTimeChangedNotification notificationEvent=new StartTimeChangedNotification(startTime );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(Boiler.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyChangedStartTime(Measure<?,?>  startTime)
{
		// call the more general method with a null notification id.
		this.notifyChangedStartTime(startTime , null);
	}
	/*Notification: StoppedSuperHeatingNotification*/
	public void notifyStoppedSuperHeating(String notificationId)
	{
		StoppedSuperHeatingNotification notificationEvent=new StoppedSuperHeatingNotification();
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(Boiler.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyStoppedSuperHeating()
{
		// call the more general method with a null notification id.
		this.notifyStoppedSuperHeating(null);
	}
	@Override
	public void updateStatus()
	{
		super.updateStatus();
	}
}
