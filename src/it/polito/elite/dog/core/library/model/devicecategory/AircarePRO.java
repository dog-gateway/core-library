/*
 * Dog - Core
 *
 * Copyright (c) 2011-2020 Dario Bonino and Luigi De Russis
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
//
// Automatically generated by the DogOnt2Dog utility
//

package it.polito.elite.dog.core.library.model.devicecategory;


 
 /**
* AircarePROCategory - automatically generated by DogOnt2Dog
*/


import it.polito.elite.dog.core.library.model.DeviceStatus;
import javax.measure.Measure;

public interface AircarePRO extends AircareComponent
{
	public static int MATCH_TYPE=100;
	public static int MATCH_SUB_TYPE=50;
	public static int MATCH_MANUFACTURER=0;

	public DeviceStatus getState();
	public Measure<?,?>  getLuminance();
	public Measure<?,?>  getSoundPressure();
	public Measure<?,?>  getWifiCount();
	public Measure<?,?>  getWifiLevel();
	public Measure<?,?>  getTvocConcentration();
	public Measure<?,?>  getAirQualityLevel();
	public Measure<?,?>  getBatteryLevel();
	public Measure<?,?>  getPm10Concentration();
	public Measure<?,?>  getCo2EqConcentration();
	public Measure<?,?>  getPressure();
	public Measure<?,?>  getCo2Concentration();
	public Measure<?,?>  getRelativeHumidity();
	public Measure<?,?>  getPm25Concentration();
	public Measure<?,?>  getTemperature();
	public Measure<?,?>  getEmHfLevel();
	public Measure<?,?>  getEmLfLevel();


	/*Generated Notifications*/

	/*Notification: Co2EqMeasurementNotification*/
	public void notifyChangedEquivalentCo2Concentration(Measure<?,?>  value);
	/*Notification: WifiCountNotification*/
	public void notifyChangedWiFiCount(Measure<?,?>  value);
	/*Notification: WiFiLevelNotification*/
	public void notifyChangedWiFiLevel(Measure<?,?>  value);
	/*Notification: HumidityMeasurementNotification*/
	public void notifyChangedRelativeHumidity(Measure<?,?>  relativeHumidity);
	/*Notification: OnNotification*/
	public void notifyOn();
	/*Notification: Pm25MeasurementNotification*/
	public void notifyChangedPm25Concentration(Measure<?,?>  value);
	/*Notification: Co2MeasurementNotification*/
	public void notifyChangedCo2Concentration(Measure<?,?>  co2Concentration);
	/*Notification: TvocMeasurementNotification*/
	public void notifyChangedTvocConcentration(Measure<?,?>  value);
	/*Notification: AirQualityNotification*/
	public void notifyChangedAirQualityLevel(Measure<?,?>  value);
	/*Notification: SoundPressureNotification*/
	public void notifyChangedSpLevel(Measure<?,?>  value);
	/*Notification: BatteryLevelNotification*/
	public void notifyChangedBatteryLevel(Measure<?,?>  batteryLevel);
	/*Notification: EmHFMeasurementNotification*/
	public void notifyChangedEmHFLevel(Measure<?,?>  value);
	/*Notification: OffNotification*/
	public void notifyOff();
	/*Notification: EmLFMeasurementNotification*/
	public void notifyChangedEmLFLevel(Measure<?,?>  value);
	/*Notification: PressureMeasurementNotification*/
	public void notifyNewPressureValue(Measure<?,?>  pressureValue);
	/*Notification: TemperatureMeasurementNotification*/
	public void notifyNewTemperatureValue(Measure<?,?>  temperatureValue);
	/*Notification: LuminosityMeasurementNotification*/
	public void notifyNewLuminosityValue(Measure<?,?>  luminosityValue);
	/*Notification: Pm10MeasurementNotification*/
	public void notifyChangedPm10Concentration(Measure<?,?>  value);
	public void updateStatus();
}
