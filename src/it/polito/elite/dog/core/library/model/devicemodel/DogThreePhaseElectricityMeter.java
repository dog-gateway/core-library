/*
 * Dog - Core
 *
 * Copyright (c) 2011-2019 Dario Bonino and Luigi De Russis
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
//
// Automatically generated by the DogOnt2Dog utility
//

package it.polito.elite.dog.core.library.model.devicemodel;


 
/**
* DogThreePhaseElectricityMeterModel - automatically generated by DogOnt2Dog
*/

import it.polito.elite.dog.core.library.model.devicecategory.ThreePhaseElectricityMeter;
import it.polito.elite.dog.core.library.model.AbstractDevice;
import it.polito.elite.dog.core.library.model.DeviceStatus;
import it.polito.elite.dog.core.library.model.DeviceDescriptor;
import org.osgi.framework.BundleContext;
import org.osgi.service.device.Device;
import javax.measure.Measure;

import it.polito.elite.dog.core.library.model.notification.*;
public class DogThreePhaseElectricityMeter extends AbstractDevice implements ThreePhaseElectricityMeter
{

	public DogThreePhaseElectricityMeter(BundleContext context, DeviceDescriptor deviceDescriptor)
	{
		super(context);


		this.setDeviceProperties(deviceDescriptor);


		this.registerDevice(Device.class.getName());
	}


	public Measure<?,?>  getReactivePower(String phaseID)
	{
		if(this.driver!=null)
		{
			return ((ThreePhaseElectricityMeter) this.driver).getReactivePower(phaseID);
		}
		 return null;
	}

	public Measure<?,?>  getActiveEnergyValue()
	{
		if(this.driver!=null)
		{
			return ((ThreePhaseElectricityMeter) this.driver).getActiveEnergyValue();
		}
		 return null;
	}

	public DeviceStatus getState()
	{
		if(this.driver!=null)
		{
			return ((ThreePhaseElectricityMeter) this.driver).getState();
		}
		 return null;
	}

	public Measure<?,?>  getActivePower(String phaseID)
	{
		if(this.driver!=null)
		{
			return ((ThreePhaseElectricityMeter) this.driver).getActivePower(phaseID);
		}
		 return null;
	}

	public Measure<?,?>  getFrequency()
	{
		if(this.driver!=null)
		{
			return ((ThreePhaseElectricityMeter) this.driver).getFrequency();
		}
		 return null;
	}

	public Measure<?,?>  getReactiveEnergyValue()
	{
		if(this.driver!=null)
		{
			return ((ThreePhaseElectricityMeter) this.driver).getReactiveEnergyValue();
		}
		 return null;
	}

	public Measure<?,?>  getElectricCurrentValue(String phaseID)
	{
		if(this.driver!=null)
		{
			return ((ThreePhaseElectricityMeter) this.driver).getElectricCurrentValue(phaseID);
		}
		 return null;
	}

	public Measure<?,?>  getLNVoltageValue(String phaseID)
	{
		if(this.driver!=null)
		{
			return ((ThreePhaseElectricityMeter) this.driver).getLNVoltageValue(phaseID);
		}
		 return null;
	}

	public Measure<?,?>  getPowerFactor()
	{
		if(this.driver!=null)
		{
			return ((ThreePhaseElectricityMeter) this.driver).getPowerFactor();
		}
		 return null;
	}

	public Measure<?,?>  getLLVoltageValue(String phaseID2, String phaseID1)
	{
		if(this.driver!=null)
		{
			return ((ThreePhaseElectricityMeter) this.driver).getLLVoltageValue(phaseID2, phaseID1);
		}
		 return null;
	}

	public Measure<?,?>  getApparentPower(String phaseID)
	{
		if(this.driver!=null)
		{
			return ((ThreePhaseElectricityMeter) this.driver).getApparentPower(phaseID);
		}
		 return null;
	}



	/*Generated Notifications*/

	/*Notification: SimpleFrequencyMeasurementNotification*/
	public void notifyNewFrequencyValue(Measure<?,?>  frequency, String notificationId)
	{
		SimpleFrequencyMeasurementNotification notificationEvent=new SimpleFrequencyMeasurementNotification(frequency );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(ThreePhaseElectricityMeter.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyNewFrequencyValue(Measure<?,?>  frequency)
{
		// call the more general method with a null notification id.
		this.notifyNewFrequencyValue(frequency , null);
	}
	/*Notification: SinglePhaseReactiveEnergyMeasurementNotification*/
	public void notifyNewReactiveEnergyValue(Measure<?,?>  value, String notificationId)
	{
		SinglePhaseReactiveEnergyMeasurementNotification notificationEvent=new SinglePhaseReactiveEnergyMeasurementNotification(value );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(ThreePhaseElectricityMeter.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyNewReactiveEnergyValue(Measure<?,?>  value)
{
		// call the more general method with a null notification id.
		this.notifyNewReactiveEnergyValue(value , null);
	}
	/*Notification: ThreePhaseActivePowerMeasurementNotification*/
	public void notifyNewActivePowerValue(String phaseID, Measure<?,?>  value, String notificationId)
	{
		ThreePhaseActivePowerMeasurementNotification notificationEvent=new ThreePhaseActivePowerMeasurementNotification(phaseID , value );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(ThreePhaseElectricityMeter.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyNewActivePowerValue(String phaseID, Measure<?,?>  value)
{
		// call the more general method with a null notification id.
		this.notifyNewActivePowerValue(phaseID , value , null);
	}
	/*Notification: ThreePhaseLNVoltageMeasurementNotification*/
	public void notifyNewPhaseNeutralVoltageValue(String phaseID, Measure<?,?>  value, String notificationId)
	{
		ThreePhaseLNVoltageMeasurementNotification notificationEvent=new ThreePhaseLNVoltageMeasurementNotification(phaseID , value );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(ThreePhaseElectricityMeter.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyNewPhaseNeutralVoltageValue(String phaseID, Measure<?,?>  value)
{
		// call the more general method with a null notification id.
		this.notifyNewPhaseNeutralVoltageValue(phaseID , value , null);
	}
	/*Notification: ThreePhaseReactivePowerMeasurementNotification*/
	public void notifyNewReactivePowerValue(String phaseID, Measure<?,?>  value, String notificationId)
	{
		ThreePhaseReactivePowerMeasurementNotification notificationEvent=new ThreePhaseReactivePowerMeasurementNotification(phaseID , value );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(ThreePhaseElectricityMeter.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyNewReactivePowerValue(String phaseID, Measure<?,?>  value)
{
		// call the more general method with a null notification id.
		this.notifyNewReactivePowerValue(phaseID , value , null);
	}
	/*Notification: ThreePhaseApparentPowerMeasurementNotification*/
	public void notifyNewApparentPowerValue(String phaseID, Measure<?,?>  value, String notificationId)
	{
		ThreePhaseApparentPowerMeasurementNotification notificationEvent=new ThreePhaseApparentPowerMeasurementNotification(phaseID , value );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(ThreePhaseElectricityMeter.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyNewApparentPowerValue(String phaseID, Measure<?,?>  value)
{
		// call the more general method with a null notification id.
		this.notifyNewApparentPowerValue(phaseID , value , null);
	}
	/*Notification: SinglePhaseActiveEnergyMeasurementNotification*/
	public void notifyNewActiveEnergyValue(Measure<?,?>  value, String notificationId)
	{
		SinglePhaseActiveEnergyMeasurementNotification notificationEvent=new SinglePhaseActiveEnergyMeasurementNotification(value );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(ThreePhaseElectricityMeter.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyNewActiveEnergyValue(Measure<?,?>  value)
{
		// call the more general method with a null notification id.
		this.notifyNewActiveEnergyValue(value , null);
	}
	/*Notification: ThreePhaseCurrentMeasurementNotification*/
	public void notifyNewCurrentValue(String phaseID, Measure<?,?>  value, String notificationId)
	{
		ThreePhaseCurrentMeasurementNotification notificationEvent=new ThreePhaseCurrentMeasurementNotification(phaseID , value );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(ThreePhaseElectricityMeter.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyNewCurrentValue(String phaseID, Measure<?,?>  value)
{
		// call the more general method with a null notification id.
		this.notifyNewCurrentValue(phaseID , value , null);
	}
	/*Notification: SinglePhasePowerFactorMeasurementNotification*/
	public void notifyNewPowerFactorValue(Measure<?,?>  powerFactor, String notificationId)
	{
		SinglePhasePowerFactorMeasurementNotification notificationEvent=new SinglePhasePowerFactorMeasurementNotification(powerFactor );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(ThreePhaseElectricityMeter.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyNewPowerFactorValue(Measure<?,?>  powerFactor)
{
		// call the more general method with a null notification id.
		this.notifyNewPowerFactorValue(powerFactor , null);
	}
	/*Notification: ThreePhaseLLVoltageMeasurementNotification*/
	public void notifyNewPhasePhaseVoltageValue(String phaseID, Measure<?,?>  value, String notificationId)
	{
		ThreePhaseLLVoltageMeasurementNotification notificationEvent=new ThreePhaseLLVoltageMeasurementNotification(phaseID , value );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(ThreePhaseElectricityMeter.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyNewPhasePhaseVoltageValue(String phaseID, Measure<?,?>  value)
{
		// call the more general method with a null notification id.
		this.notifyNewPhasePhaseVoltageValue(phaseID , value , null);
	}
	@Override
	public void updateStatus()
	{
		super.updateStatus();
	}
}
