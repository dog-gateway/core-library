/*
 * Dog - Core
 *
 * Copyright (c) 2011-2016 Dario Bonino and Luigi De Russis
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
//
// Automatically generated by the DogOnt2Dog utility
//

package it.polito.elite.dog.core.library.model.devicemodel;


 
/**
* DogCC2650SensorTagModel - automatically generated by DogOnt2Dog
*/

import it.polito.elite.dog.core.library.model.devicecategory.CC2650SensorTag;
import it.polito.elite.dog.core.library.model.AbstractDevice;
import it.polito.elite.dog.core.library.model.DeviceStatus;
import it.polito.elite.dog.core.library.model.DeviceDescriptor;
import org.osgi.framework.BundleContext;
import org.osgi.service.device.Device;
import javax.measure.Measure;

import it.polito.elite.dog.core.library.model.notification.*;
public class DogCC2650SensorTag extends AbstractDevice implements CC2650SensorTag
{

	public DogCC2650SensorTag(BundleContext context, DeviceDescriptor deviceDescriptor)
	{
		super(context);


		this.setDeviceProperties(deviceDescriptor);


		this.registerDevice(Device.class.getName());
	}


	public Measure<?,?>  getPressure()
	{
		if(this.driver!=null)
		{
			return ((CC2650SensorTag) this.driver).getPressure();
		}
		 return null;
	}

	public DeviceStatus getState()
	{
		if(this.driver!=null)
		{
			return ((CC2650SensorTag) this.driver).getState();
		}
		 return null;
	}

	public Measure<?,?>  getLuminance()
	{
		if(this.driver!=null)
		{
			return ((CC2650SensorTag) this.driver).getLuminance();
		}
		 return null;
	}

	public Measure<?,?>  getRelativeHumidity()
	{
		if(this.driver!=null)
		{
			return ((CC2650SensorTag) this.driver).getRelativeHumidity();
		}
		 return null;
	}

	public Measure<?,?>  getTemperatureFrom(String sensorURI)
	{
		if(this.driver!=null)
		{
			return ((CC2650SensorTag) this.driver).getTemperatureFrom(sensorURI);
		}
		 return null;
	}



	/*Generated Notifications*/

	/*Notification: TridimensionalAccelerationNotification*/
	public void notifyNew3DAccelerationValue(Measure<?,?>  accY, Measure<?,?>  accZ, Measure<?,?>  accX){
		TridimensionalAccelerationNotification notificationEvent=new TridimensionalAccelerationNotification(accY , accZ , accX );
		notificationEvent.setDeviceUri(this.deviceId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}
	/*Notification: ReleasedMNotification*/
	public void notifyReleased(String buttonID){
		ReleasedMNotification notificationEvent=new ReleasedMNotification(buttonID );
		notificationEvent.setDeviceUri(this.deviceId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}
	/*Notification: TridimensionalMagnetometerNotification*/
	public void notifyNew3DMagnetometerValue(Measure<?,?>  magY, Measure<?,?>  magZ, Measure<?,?>  magX){
		TridimensionalMagnetometerNotification notificationEvent=new TridimensionalMagnetometerNotification(magY , magZ , magX );
		notificationEvent.setDeviceUri(this.deviceId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}
	/*Notification: HumidityMeasurementNotification*/
	public void notifyChangedRelativeHumidity(Measure<?,?>  relativeHumidity){
		HumidityMeasurementNotification notificationEvent=new HumidityMeasurementNotification(relativeHumidity );
		notificationEvent.setDeviceUri(this.deviceId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}
	/*Notification: PressureMeasurementNotification*/
	public void notifyNewPressureValue(Measure<?,?>  pressureValue){
		PressureMeasurementNotification notificationEvent=new PressureMeasurementNotification(pressureValue );
		notificationEvent.setDeviceUri(this.deviceId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}
	/*Notification: PressedMNotification*/
	public void notifyPressed(String buttonID){
		PressedMNotification notificationEvent=new PressedMNotification(buttonID );
		notificationEvent.setDeviceUri(this.deviceId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}
	/*Notification: TridimensionalGyroscopeNotification*/
	public void notifyNew3DGyroscopeValue(Measure<?,?>  gyroZ, Measure<?,?>  gyroX, Measure<?,?>  gyroY){
		TridimensionalGyroscopeNotification notificationEvent=new TridimensionalGyroscopeNotification(gyroZ , gyroX , gyroY );
		notificationEvent.setDeviceUri(this.deviceId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}
	/*Notification: TemperatureMeasurementMNotification*/
	public void notifyChangedTemperatureAt(Measure<?,?>  temperatureValue, String sensorID){
		TemperatureMeasurementMNotification notificationEvent=new TemperatureMeasurementMNotification(temperatureValue , sensorID );
		notificationEvent.setDeviceUri(this.deviceId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}
	/*Notification: LuminosityMeasurementNotification*/
	public void notifyNewLuminosityValue(Measure<?,?>  luminosityValue){
		LuminosityMeasurementNotification notificationEvent=new LuminosityMeasurementNotification(luminosityValue );
		notificationEvent.setDeviceUri(this.deviceId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}
	@Override
	public void updateStatus()
	{
		super.updateStatus();
	}
}
