/*
 * Dog - Core
 *
 * Copyright (c) 2011-2019 Dario Bonino and Luigi De Russis
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
//
// Automatically generated by the DogOnt2Dog utility
//

package it.polito.elite.dog.core.library.model.devicemodel;


 
/**
* DogTripleSensorModel - automatically generated by DogOnt2Dog
*/

import it.polito.elite.dog.core.library.model.devicecategory.TripleSensor;
import it.polito.elite.dog.core.library.model.AbstractDevice;
import it.polito.elite.dog.core.library.model.DeviceStatus;
import it.polito.elite.dog.core.library.model.DeviceDescriptor;
import org.osgi.framework.BundleContext;
import org.osgi.service.device.Device;
import javax.measure.Measure;

import it.polito.elite.dog.core.library.model.notification.*;
public class DogTripleSensor extends AbstractDevice implements TripleSensor
{

	public DogTripleSensor(BundleContext context, DeviceDescriptor deviceDescriptor)
	{
		super(context);


		this.setDeviceProperties(deviceDescriptor);


		this.registerDevice(Device.class.getName());
	}


	public void deleteGroup(Integer groupID)
	{
		if(this.driver!=null)
		{
			((TripleSensor) this.driver).deleteGroup(groupID);
		}
	}

	public DeviceStatus getState()
	{
		if(this.driver!=null)
		{
			return ((TripleSensor) this.driver).getState();
		}
		 return null;
	}

	public Measure<?,?>  getLuminance()
	{
		if(this.driver!=null)
		{
			return ((TripleSensor) this.driver).getLuminance();
		}
		 return null;
	}

	public Measure<?,?>  getTemperature()
	{
		if(this.driver!=null)
		{
			return ((TripleSensor) this.driver).getTemperature();
		}
		 return null;
	}

	public void storeGroup(Integer groupID)
	{
		if(this.driver!=null)
		{
			((TripleSensor) this.driver).storeGroup(groupID);
		}
	}



	/*Generated Notifications*/

	/*Notification: LeaveGroupNotification*/
	public void notifyLeftGroup(Integer groupNumber, String notificationId)
	{
		LeaveGroupNotification notificationEvent=new LeaveGroupNotification(groupNumber );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(TripleSensor.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyLeftGroup(Integer groupNumber)
{
		// call the more general method with a null notification id.
		this.notifyLeftGroup(groupNumber , null);
	}
	/*Notification: SimpleNoMovementNotification*/
	public void notifyCeasedMovement(String notificationId)
	{
		SimpleNoMovementNotification notificationEvent=new SimpleNoMovementNotification();
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(TripleSensor.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyCeasedMovement()
{
		// call the more general method with a null notification id.
		this.notifyCeasedMovement(null);
	}
	/*Notification: SimpleMovementNotification*/
	public void notifyStartedMovement(String notificationId)
	{
		SimpleMovementNotification notificationEvent=new SimpleMovementNotification();
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(TripleSensor.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyStartedMovement()
{
		// call the more general method with a null notification id.
		this.notifyStartedMovement(null);
	}
	/*Notification: TemperatureMeasurementNotification*/
	public void notifyNewTemperatureValue(Measure<?,?>  temperatureValue, String notificationId)
	{
		TemperatureMeasurementNotification notificationEvent=new TemperatureMeasurementNotification(temperatureValue );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(TripleSensor.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyNewTemperatureValue(Measure<?,?>  temperatureValue)
{
		// call the more general method with a null notification id.
		this.notifyNewTemperatureValue(temperatureValue , null);
	}
	/*Notification: JoinGroupNotification*/
	public void notifyJoinedGroup(Integer groupNumber, String notificationId)
	{
		JoinGroupNotification notificationEvent=new JoinGroupNotification(groupNumber );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(TripleSensor.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyJoinedGroup(Integer groupNumber)
{
		// call the more general method with a null notification id.
		this.notifyJoinedGroup(groupNumber , null);
	}
	/*Notification: LuminosityMeasurementNotification*/
	public void notifyNewLuminosityValue(Measure<?,?>  luminosityValue, String notificationId)
	{
		LuminosityMeasurementNotification notificationEvent=new LuminosityMeasurementNotification(luminosityValue );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(TripleSensor.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyNewLuminosityValue(Measure<?,?>  luminosityValue)
{
		// call the more general method with a null notification id.
		this.notifyNewLuminosityValue(luminosityValue , null);
	}
	@Override
	public void updateStatus()
	{
		super.updateStatus();
	}
}
