/*
 * Dog - Core
 *
 * Copyright (c) 2011-2020 Dario Bonino and Luigi De Russis
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */
//
// Automatically generated by the DogOnt2Dog utility
//

package it.polito.elite.dog.core.library.model.devicemodel;


 
/**
* DogAircarePROModel - automatically generated by DogOnt2Dog
*/

import it.polito.elite.dog.core.library.model.devicecategory.AircarePRO;
import it.polito.elite.dog.core.library.model.AbstractDevice;
import it.polito.elite.dog.core.library.model.DeviceStatus;
import it.polito.elite.dog.core.library.model.DeviceDescriptor;
import org.osgi.framework.BundleContext;
import org.osgi.service.device.Device;
import javax.measure.Measure;

import it.polito.elite.dog.core.library.model.notification.*;
public class DogAircarePRO extends AbstractDevice implements AircarePRO
{

	public DogAircarePRO(BundleContext context, DeviceDescriptor deviceDescriptor)
	{
		super(context);


		this.setDeviceProperties(deviceDescriptor);


		this.registerDevice(Device.class.getName());
	}


	public DeviceStatus getState()
	{
		if(this.driver!=null)
		{
			return ((AircarePRO) this.driver).getState();
		}
		 return null;
	}

	public Measure<?,?>  getLuminance()
	{
		if(this.driver!=null)
		{
			return ((AircarePRO) this.driver).getLuminance();
		}
		 return null;
	}

	public Measure<?,?>  getSoundPressure()
	{
		if(this.driver!=null)
		{
			return ((AircarePRO) this.driver).getSoundPressure();
		}
		 return null;
	}

	public Measure<?,?>  getWifiCount()
	{
		if(this.driver!=null)
		{
			return ((AircarePRO) this.driver).getWifiCount();
		}
		 return null;
	}

	public Measure<?,?>  getWifiLevel()
	{
		if(this.driver!=null)
		{
			return ((AircarePRO) this.driver).getWifiLevel();
		}
		 return null;
	}

	public Measure<?,?>  getTvocConcentration()
	{
		if(this.driver!=null)
		{
			return ((AircarePRO) this.driver).getTvocConcentration();
		}
		 return null;
	}

	public Measure<?,?>  getAirQualityLevel()
	{
		if(this.driver!=null)
		{
			return ((AircarePRO) this.driver).getAirQualityLevel();
		}
		 return null;
	}

	public Measure<?,?>  getBatteryLevel()
	{
		if(this.driver!=null)
		{
			return ((AircarePRO) this.driver).getBatteryLevel();
		}
		 return null;
	}

	public Measure<?,?>  getPm10Concentration()
	{
		if(this.driver!=null)
		{
			return ((AircarePRO) this.driver).getPm10Concentration();
		}
		 return null;
	}

	public Measure<?,?>  getCo2EqConcentration()
	{
		if(this.driver!=null)
		{
			return ((AircarePRO) this.driver).getCo2EqConcentration();
		}
		 return null;
	}

	public Measure<?,?>  getPressure()
	{
		if(this.driver!=null)
		{
			return ((AircarePRO) this.driver).getPressure();
		}
		 return null;
	}

	public Measure<?,?>  getCo2Concentration()
	{
		if(this.driver!=null)
		{
			return ((AircarePRO) this.driver).getCo2Concentration();
		}
		 return null;
	}

	public Measure<?,?>  getRelativeHumidity()
	{
		if(this.driver!=null)
		{
			return ((AircarePRO) this.driver).getRelativeHumidity();
		}
		 return null;
	}

	public Measure<?,?>  getPm25Concentration()
	{
		if(this.driver!=null)
		{
			return ((AircarePRO) this.driver).getPm25Concentration();
		}
		 return null;
	}

	public Measure<?,?>  getTemperature()
	{
		if(this.driver!=null)
		{
			return ((AircarePRO) this.driver).getTemperature();
		}
		 return null;
	}

	public Measure<?,?>  getEmHfLevel()
	{
		if(this.driver!=null)
		{
			return ((AircarePRO) this.driver).getEmHfLevel();
		}
		 return null;
	}

	public Measure<?,?>  getEmLfLevel()
	{
		if(this.driver!=null)
		{
			return ((AircarePRO) this.driver).getEmLfLevel();
		}
		 return null;
	}



	/*Generated Notifications*/

	/*Notification: Co2EqMeasurementNotification*/
	public void notifyChangedEquivalentCo2Concentration(Measure<?,?>  value, String notificationId)
	{
		Co2EqMeasurementNotification notificationEvent=new Co2EqMeasurementNotification(value );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(AircarePRO.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyChangedEquivalentCo2Concentration(Measure<?,?>  value)
{
		// call the more general method with a null notification id.
		this.notifyChangedEquivalentCo2Concentration(value , null);
	}
	/*Notification: WifiCountNotification*/
	public void notifyChangedWiFiCount(Measure<?,?>  value, String notificationId)
	{
		WifiCountNotification notificationEvent=new WifiCountNotification(value );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(AircarePRO.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyChangedWiFiCount(Measure<?,?>  value)
{
		// call the more general method with a null notification id.
		this.notifyChangedWiFiCount(value , null);
	}
	/*Notification: WiFiLevelNotification*/
	public void notifyChangedWiFiLevel(Measure<?,?>  value, String notificationId)
	{
		WiFiLevelNotification notificationEvent=new WiFiLevelNotification(value );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(AircarePRO.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyChangedWiFiLevel(Measure<?,?>  value)
{
		// call the more general method with a null notification id.
		this.notifyChangedWiFiLevel(value , null);
	}
	/*Notification: HumidityMeasurementNotification*/
	public void notifyChangedRelativeHumidity(Measure<?,?>  relativeHumidity, String notificationId)
	{
		HumidityMeasurementNotification notificationEvent=new HumidityMeasurementNotification(relativeHumidity );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(AircarePRO.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyChangedRelativeHumidity(Measure<?,?>  relativeHumidity)
{
		// call the more general method with a null notification id.
		this.notifyChangedRelativeHumidity(relativeHumidity , null);
	}
	/*Notification: OnNotification*/
	public void notifyOn(String notificationId)
	{
		OnNotification notificationEvent=new OnNotification();
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(AircarePRO.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyOn()
{
		// call the more general method with a null notification id.
		this.notifyOn(null);
	}
	/*Notification: Pm25MeasurementNotification*/
	public void notifyChangedPm25Concentration(Measure<?,?>  value, String notificationId)
	{
		Pm25MeasurementNotification notificationEvent=new Pm25MeasurementNotification(value );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(AircarePRO.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyChangedPm25Concentration(Measure<?,?>  value)
{
		// call the more general method with a null notification id.
		this.notifyChangedPm25Concentration(value , null);
	}
	/*Notification: Co2MeasurementNotification*/
	public void notifyChangedCo2Concentration(Measure<?,?>  co2Concentration, String notificationId)
	{
		Co2MeasurementNotification notificationEvent=new Co2MeasurementNotification(co2Concentration );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(AircarePRO.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyChangedCo2Concentration(Measure<?,?>  co2Concentration)
{
		// call the more general method with a null notification id.
		this.notifyChangedCo2Concentration(co2Concentration , null);
	}
	/*Notification: TvocMeasurementNotification*/
	public void notifyChangedTvocConcentration(Measure<?,?>  value, String notificationId)
	{
		TvocMeasurementNotification notificationEvent=new TvocMeasurementNotification(value );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(AircarePRO.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyChangedTvocConcentration(Measure<?,?>  value)
{
		// call the more general method with a null notification id.
		this.notifyChangedTvocConcentration(value , null);
	}
	/*Notification: AirQualityNotification*/
	public void notifyChangedAirQualityLevel(Measure<?,?>  value, String notificationId)
	{
		AirQualityNotification notificationEvent=new AirQualityNotification(value );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(AircarePRO.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyChangedAirQualityLevel(Measure<?,?>  value)
{
		// call the more general method with a null notification id.
		this.notifyChangedAirQualityLevel(value , null);
	}
	/*Notification: SoundPressureNotification*/
	public void notifyChangedSpLevel(Measure<?,?>  value, String notificationId)
	{
		SoundPressureNotification notificationEvent=new SoundPressureNotification(value );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(AircarePRO.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyChangedSpLevel(Measure<?,?>  value)
{
		// call the more general method with a null notification id.
		this.notifyChangedSpLevel(value , null);
	}
	/*Notification: BatteryLevelNotification*/
	public void notifyChangedBatteryLevel(Measure<?,?>  batteryLevel, String notificationId)
	{
		BatteryLevelNotification notificationEvent=new BatteryLevelNotification(batteryLevel );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(AircarePRO.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyChangedBatteryLevel(Measure<?,?>  batteryLevel)
{
		// call the more general method with a null notification id.
		this.notifyChangedBatteryLevel(batteryLevel , null);
	}
	/*Notification: EmHFMeasurementNotification*/
	public void notifyChangedEmHFLevel(Measure<?,?>  value, String notificationId)
	{
		EmHFMeasurementNotification notificationEvent=new EmHFMeasurementNotification(value );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(AircarePRO.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyChangedEmHFLevel(Measure<?,?>  value)
{
		// call the more general method with a null notification id.
		this.notifyChangedEmHFLevel(value , null);
	}
	/*Notification: OffNotification*/
	public void notifyOff(String notificationId)
	{
		OffNotification notificationEvent=new OffNotification();
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(AircarePRO.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyOff()
{
		// call the more general method with a null notification id.
		this.notifyOff(null);
	}
	/*Notification: EmLFMeasurementNotification*/
	public void notifyChangedEmLFLevel(Measure<?,?>  value, String notificationId)
	{
		EmLFMeasurementNotification notificationEvent=new EmLFMeasurementNotification(value );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(AircarePRO.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyChangedEmLFLevel(Measure<?,?>  value)
{
		// call the more general method with a null notification id.
		this.notifyChangedEmLFLevel(value , null);
	}
	/*Notification: PressureMeasurementNotification*/
	public void notifyNewPressureValue(Measure<?,?>  pressureValue, String notificationId)
	{
		PressureMeasurementNotification notificationEvent=new PressureMeasurementNotification(pressureValue );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(AircarePRO.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyNewPressureValue(Measure<?,?>  pressureValue)
{
		// call the more general method with a null notification id.
		this.notifyNewPressureValue(pressureValue , null);
	}
	/*Notification: TemperatureMeasurementNotification*/
	public void notifyNewTemperatureValue(Measure<?,?>  temperatureValue, String notificationId)
	{
		TemperatureMeasurementNotification notificationEvent=new TemperatureMeasurementNotification(temperatureValue );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(AircarePRO.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyNewTemperatureValue(Measure<?,?>  temperatureValue)
{
		// call the more general method with a null notification id.
		this.notifyNewTemperatureValue(temperatureValue , null);
	}
	/*Notification: LuminosityMeasurementNotification*/
	public void notifyNewLuminosityValue(Measure<?,?>  luminosityValue, String notificationId)
	{
		LuminosityMeasurementNotification notificationEvent=new LuminosityMeasurementNotification(luminosityValue );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(AircarePRO.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyNewLuminosityValue(Measure<?,?>  luminosityValue)
{
		// call the more general method with a null notification id.
		this.notifyNewLuminosityValue(luminosityValue , null);
	}
	/*Notification: Pm10MeasurementNotification*/
	public void notifyChangedPm10Concentration(Measure<?,?>  value, String notificationId)
	{
		Pm10MeasurementNotification notificationEvent=new Pm10MeasurementNotification(value );
		// store the device uri
		notificationEvent.setDeviceUri(this.deviceId);
		// store the device class name
		notificationEvent.setDeviceClassName(AircarePRO.class.getSimpleName());
		// store the notification id, if specified.
		notificationEvent.setNotificationId(notificationId);
		// Send the notification through the EventAdmin
		notifyEventAdmin(notificationEvent);
	}

	public void notifyChangedPm10Concentration(Measure<?,?>  value)
{
		// call the more general method with a null notification id.
		this.notifyChangedPm10Concentration(value , null);
	}
	@Override
	public void updateStatus()
	{
		super.updateStatus();
	}
}
